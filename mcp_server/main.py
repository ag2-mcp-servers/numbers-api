# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T07:36:34+00:00



import argparse
import json
import os
from typing import *
from typing import Optional, Union

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import APIKeyQuery, BaseSecurity
from pydantic import conint
from starlette.requests import Request

from models import (
    AccountUnauthorized,
    AvailableNumbers,
    Country,
    Features,
    InboundNumbers,
    Response,
    Response420,
    SearchPattern,
    Type,
    Unauthorized,
)

app = MCPProxy(
    contact={
        'email': 'devrel@vonage.com',
        'name': 'Vonage DevRel',
        'url': 'https://developer.nexmo.com',
    },
    description='The Numbers API enables you to manage your existing numbers and buy new virtual numbers for use with the Vonage APIs. Further information is here: <https://developer.nexmo.com/numbers/overview>',
    license={
        'name': 'The MIT License (MIT)',
        'url': 'https://opensource.org/licenses/MIT',
    },
    termsOfService='https://www.nexmo.com/terms-of-use',
    title='Numbers API',
    version='1.0.20',
    servers=[{'url': 'https://rest.nexmo.com'}],
)


@app.get(
    '/account/numbers',
    description=""" Retrieve all the inbound numbers associated with your Vonage account. """,
    tags=['number_management'],
    security=[
        APIKeyQuery(name="api_key"),
        APIKeyQuery(name="api_secret"),
    ],
)
def get_owned_numbers(
    application_id: Optional[str] = None,
    has_application: Optional[bool] = None,
    country: Optional[Country] = None,
    pattern: Optional[str] = None,
    search_pattern: Optional[SearchPattern] = 0,
    size: Optional[conint(le=100)] = 10,
    index: Optional[int] = 1,
):
    """
    List the numbers you own
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/number/buy',
    description=""" Request to purchase a specific inbound number. """,
    tags=['number_management'],
    security=[
        APIKeyQuery(name="api_key"),
        APIKeyQuery(name="api_secret"),
    ],
)
def buy_a_number(request: Request):
    """
    Buy a number
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/number/cancel',
    description=""" Cancel your subscription for a specific inbound number. """,
    tags=['number_management'],
    security=[
        APIKeyQuery(name="api_key"),
        APIKeyQuery(name="api_secret"),
    ],
)
def cancel_a_number(request: Request):
    """
    Cancel a number
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/number/search',
    description=""" Retrieve inbound numbers that are available for the specified country. """,
    tags=['number_management'],
    security=[
        APIKeyQuery(name="api_key"),
        APIKeyQuery(name="api_secret"),
    ],
)
def get_available_numbers(
    country: Country,
    type: Optional[Type] = None,
    pattern: Optional[str] = None,
    search_pattern: Optional[SearchPattern] = 0,
    features: Optional[Features] = None,
    size: Optional[conint(le=100)] = 10,
    index: Optional[int] = 1,
):
    """
    Search available numbers
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/number/update',
    description=""" Change the behaviour of a number that you own. """,
    tags=['number_management'],
    security=[
        APIKeyQuery(name="api_key"),
        APIKeyQuery(name="api_secret"),
    ],
)
def update_a_number(request: Request):
    """
    Update a number
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
